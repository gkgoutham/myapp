package org.gk.shopping.app.bean;

import static javax.persistence.GenerationType.IDENTITY;

import java.util.Date;
import java.util.HashSet;
import java.util.Set;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.UniqueConstraint;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonInclude.Include;

/**
 * Users generated by hbm2java
 */
@Entity
@Table(name = "users", catalog = "gkapp", uniqueConstraints = { @UniqueConstraint(columnNames = "email_id"),
		@UniqueConstraint(columnNames = "user_name") })
public class Users implements java.io.Serializable {

	/**
	 * 
	 */
	private static final long serialVersionUID = 6314768493309969281L;
	private Integer id;
	private Partner partner;
	private String userName;
	private String firstName;
	private String lastName;
	private String password;
	private Date createdOn;
	private String createdBy;
	private Date approvedOn;
	private String approvedBy;
	private Date lastLoginOn;
	private Byte isActive;
	private Byte isApproved;
	private String emailId;
	private String userType;
	private Set<Partner> partners = new HashSet<Partner>(0);
	private Set<Category> categoriesForApprovedBy = new HashSet<Category>(0);
	private Set<PhoneNumbers> phoneNumberses = new HashSet<PhoneNumbers>(0);
	private Set<Roles> roleses = new HashSet<Roles>(0);
	private Set<Category> categoriesForCreatedBy = new HashSet<Category>(0);

	public Users() {
	}

	public Users(String userName, String password, Date createdOn, String createdBy, String emailId, String userType) {
		this.userName = userName;
		this.password = password;
		this.createdOn = createdOn;
		this.createdBy = createdBy;
		this.emailId = emailId;
		this.userType = userType;
	}

	public Users(Partner partner, String userName, String firstName, String lastName, String password, Date createdOn,
			String createdBy, Date approvedOn, String approvedBy, Date lastLoginOn, Byte isActive, Byte isApproved,
			String emailId, String userType, Set<Partner> partners, Set<Category> categoriesForApprovedBy,
			Set<PhoneNumbers> phoneNumberses, Set<Roles> roleses, Set<Category> categoriesForCreatedBy) {
		this.partner = partner;
		this.userName = userName;
		this.firstName = firstName;
		this.lastName = lastName;
		this.password = password;
		this.createdOn = createdOn;
		this.createdBy = createdBy;
		this.approvedOn = approvedOn;
		this.approvedBy = approvedBy;
		this.lastLoginOn = lastLoginOn;
		this.isActive = isActive;
		this.isApproved = isApproved;
		this.emailId = emailId;
		this.userType = userType;
		this.partners = partners;
		this.categoriesForApprovedBy = categoriesForApprovedBy;
		this.phoneNumberses = phoneNumberses;
		this.roleses = roleses;
		this.categoriesForCreatedBy = categoriesForCreatedBy;
	}

	@Id
	@GeneratedValue(strategy = IDENTITY)

	@Column(name = "id", unique = true, nullable = false)
	public Integer getId() {
		return this.id;
	}

	public void setId(Integer id) {
		this.id = id;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "partner")
	public Partner getPartner() {
		return this.partner;
	}

	public void setPartner(Partner partner) {
		this.partner = partner;
	}

	@Column(name = "user_name", unique = true, nullable = false, length = 45)
	public String getUserName() {
		return this.userName;
	}

	public void setUserName(String userName) {
		this.userName = userName;
	}

	@Column(name = "first_name", length = 45)
	public String getFirstName() {
		return this.firstName;
	}

	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}

	@Column(name = "last_name", length = 45)
	public String getLastName() {
		return this.lastName;
	}

	public void setLastName(String lastName) {
		this.lastName = lastName;
	}

	@Column(name = "password", nullable = false, length = 45)
	public String getPassword() {
		return this.password;
	}

	public void setPassword(String password) {
		this.password = password;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "created_on", nullable = false, length = 19)
	public Date getCreatedOn() {
		return this.createdOn;
	}

	public void setCreatedOn(Date createdOn) {
		this.createdOn = createdOn;
	}

	@Column(name = "created_by", nullable = false, length = 45)
	public String getCreatedBy() {
		return this.createdBy;
	}

	public void setCreatedBy(String createdBy) {
		this.createdBy = createdBy;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "approved_on", length = 19)
	public Date getApprovedOn() {
		return this.approvedOn;
	}

	public void setApprovedOn(Date approvedOn) {
		this.approvedOn = approvedOn;
	}

	@Column(name = "approved_by", length = 45)
	public String getApprovedBy() {
		return this.approvedBy;
	}

	public void setApprovedBy(String approvedBy) {
		this.approvedBy = approvedBy;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "last_login_on", length = 19)
	public Date getLastLoginOn() {
		return this.lastLoginOn;
	}

	public void setLastLoginOn(Date lastLoginOn) {
		this.lastLoginOn = lastLoginOn;
	}

	@Column(name = "is_active")
	public Byte getIsActive() {
		return this.isActive;
	}

	public void setIsActive(Byte isActive) {
		this.isActive = isActive;
	}

	@Column(name = "is_approved")
	public Byte getIsApproved() {
		return this.isApproved;
	}

	public void setIsApproved(Byte isApproved) {
		this.isApproved = isApproved;
	}

	@Column(name = "email_id", unique = true, nullable = false, length = 45)
	public String getEmailId() {
		return this.emailId;
	}

	public void setEmailId(String emailId) {
		this.emailId = emailId;
	}

	@Column(name = "user_type", nullable = false, length = 15)
	public String getUserType() {
		return this.userType;
	}

	public void setUserType(String userType) {
		this.userType = userType;
	}

	@JsonInclude(Include.ALWAYS)
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "users")
	public Set<Partner> getPartners() {
		return this.partners;
	}

	public void setPartners(Set<Partner> partners) {
		this.partners = partners;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "usersByApprovedBy")
	public Set<Category> getCategoriesForApprovedBy() {
		return this.categoriesForApprovedBy;
	}

	public void setCategoriesForApprovedBy(Set<Category> categoriesForApprovedBy) {
		this.categoriesForApprovedBy = categoriesForApprovedBy;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "users")
	public Set<PhoneNumbers> getPhoneNumberses() {
		return this.phoneNumberses;
	}

	public void setPhoneNumberses(Set<PhoneNumbers> phoneNumberses) {
		this.phoneNumberses = phoneNumberses;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "users")
	public Set<Roles> getRoleses() {
		return this.roleses;
	}

	public void setRoleses(Set<Roles> roleses) {
		this.roleses = roleses;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "usersByCreatedBy")
	public Set<Category> getCategoriesForCreatedBy() {
		return this.categoriesForCreatedBy;
	}

	public void setCategoriesForCreatedBy(Set<Category> categoriesForCreatedBy) {
		this.categoriesForCreatedBy = categoriesForCreatedBy;
	}

}
